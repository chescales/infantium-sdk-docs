.. _walkthroughs-game:

=====================================================
 Walkthrough: Game
=====================================================

:Date: |today|
:Version: |release|
:Description: This tutorial shows how to send a game rawdata, detailing the different required functions with its
    parameters.

Introduction
===========================

Dependencies
---------------------------

This SDK requires the library LoopJ v1.4.3 to be included in the project for proper functioning. You can find it in
the following link: `LoopJ Library 1.4.3`_

Android Permissions
---------------------------

The present SDK requires the following Android Permissions in the App manifest:

 - `INTERNET`_
 - `ACCESS_NETWORK_STATE`_

Singleton Pattern
---------------------------

Infantium_SDK has been created using a Singleton pattern, so the only way to get an instance of the class is by
calling the function: `getInfantium_SDK(Context context)`_. The SDK requires the *Context* of the Android Activity.

.. topic:: Example:

 Infantium_SDK infantium = Infantium_SDK.getInfantium_SDK(this.getBaseContext());


The Handler
---------------------------

As most functions work asynchronously, an HttpHandler must be implemented. In order to simplify this task Infantium
created a class called *InfantiumAsyncResponseHandler* that provides the methods that must be implemented by the
Developers. Its methods are called after making a request to the API, such as creating a new player, getting logged
or sending an e-book rawdata.

Here we can see an example of how to implement an *InfantiumasyncResponseHandler*:

.. code-block:: java

 InfantiumAsyncResponseHandler infantiumHandler = new InfantiumAsyncResponseHandler() {
		@Override
		public void onSuccessCloseGameplay(){
			System.out.println("---Gameplay closed successfully---");
		}

		@Override
		public void onFailureCloseGameplay(String description){
			System.out.println(description);
		}
 };

In this example, if the user creates the *Gameplay* successfully, the SDK will call the `onSuccessCloseGameplay()`_.
If a problem comes up, it will call the `onFailureCloseGameplay(String description)`_. The description is a short
descriptive message that explains where or why the problem has arised.

Walkthrough
=====================

1. Configure the SDK
----------------------------------------

First of all, we have to configure the SDK with some data. This data will be, on one hand, the developer API
credentials for contacting with Infantium (`setDeveloperCredentials(String api_user, String api_key)`_). The other
function we should call is the `setDeviceInfo(w_dev, h_dev)`_ function in order to set the current device pixels.
Finally, if you want to receive feedback from the SDK, you will need to implement a Handler. This will be further
explained in the Handler section. You can do that with the `setDeveloperHandler(InfantiumAsyncResponseHandler handler)`_
function.

.. code-block:: java

   // Configure the SDK
   infantium.setDeveloperCredentials(api_user, api_key);
   infantium.setDeviceInfo(w_dev, h_dev);
   infantium.setDeveloperHandler(handler);


2. Set Game ContentApp UUID
---------------------------------------------

The next step if to set the *contentapp_uuid*, which will identify the App against the server. To configure it the
method `setContentAppUUID(String contentapp_uuid)`_ should be used.

.. code-block:: java

   // Set the App contentapp_uuid
   infantium.setContentAppUUID(contentapp_uuid);


3. Create Gameplay:
----------------------------------------------

When we have set the *contentapp_uuid* we can create a *Gameplay* with: `createGameplay(String subcontent_uuid)`_. The
*subcontent_uuid* will be provided to you by Infantium, which will be a unique identifier for your activity.

.. code-block:: java

   // Send the previously introduced data
   infantium.createGameplay(subcontent_uuid);

 
4. Rawdata Functions:
-------------------------------------

The *GamePlay* is created once everytime the kid starts a game session. Now, for every activity played during that time,
a *RawData* object is sent, which will contain the information we need to analyze. This contains, among other generic
stats, the elements in the screen, the actions the kid performs, and some info about the results.

When the kid enters one of the activities of the game (i.e. starts playing the game), the *RawData* is filled in three
phases:

1. Register the elements in the screen.

 This is done adding the `Elements`_ in the screen (`addElement(Element element)`_) and the `Sounds`_ if there are any
 (`addSound(Sound sound)`_).

 An example element and sound could be:

 .. code-block:: java

    // Add an element for a dog drawing
    List<Integer> size = Arrays.asList(10, 10);
    List<Integer> pos = Arrays.asList(20, 20);
    Element dog_element = new Element(
        "dog_figure",
        size,
        "[0,255,0]",
        "animal",
        "dog",
        pos
    );
    infantium.addElement(dog_element);

    // Add the sound the dog makes when it is tapped
    Sound dog_sound = new Sound(
        "barking"
    );
    infantium.addSound(dog_sound);

 Once registered, it is very important to point out the elements to evaluate on the screen (there may be different
 elements, but only a few important for the activity):

 .. code-block:: java

    // Add an element for a dog drawing
    List<String> evaluate = Arrays.asList("dog_figure");
    infantium.setEvaluate(evaluate);

2. Start the timers and register the actions of the kid.

 When the kid starts interacting with the screen, we will call the `startPlaying()`_ method. This will trigger the
 timers inside the SDK. The SDK will automatically handle the timestamps when the kid taps the screen and the elements
 show up, which will allow us to get a lot of statistics about the child's development, with no effort at all on the
 developer side.

 For each time the kid taps on the screen, this will be registered with the `tapOnObjects(String element_id)`_ method.
 In this method, it must be pointed out if the interaction represents a *success*, an *error* or *none* of both. Here
 is an example for the previous *dog* with its sound:

 .. code-block:: java

    // Tapping the dog is the goal of the activity, and thus is represented a "success". When the dog is tapped,
    //  the "barking" sound is triggered.
    infantium.tapOnObjects("dog_figure", "success", "barking");

    // Another example, if the kid taps on the "cat_figure" element, but was not the goal of this activity.
    infantium.tapOnObjects("cat_figure", "error", "error_sound");

3. Add some general info about the scores.

 When the kid has completed the activity, some conclusions about the activity are registered. This is done with the
 `setSuccesses(int successes)`_ and `setFailures(int failures)`_ methods.

 .. code-block:: java

    // Finally one "success" and one "failure"
    infantium.setSuccesses(1);
    infantium.setFailures(1);


5. Send Game Rawdata:
------------------------------

We finally call `sendGameRawData()`_ when we want to send the *RawData*. After sending the data, and the kid starts
a new activity, the flow would go again to the 4th step! If the kid goes back to the main menu, proceed to step 6.

.. code-block:: java

    // Send the previously introduced data
    infantium.sendGameRawData();


6. Close Gameplay
------------------------------

Last step but not least important: `closeGameplay()`_. If the *GamePlay* is not closed, the SDK will not be able to
create new ones.


7. Conclusions
---------------

And with this

.. _INTERNET: http://developer.android.com/reference/android/Manifest.permission.html#INTERNET
.. _ACCESS_NETWORK_STATE: http://developer.android.com/reference/android/Manifest.permission.html#ACCESS_NETWORK_STATE
.. _LoopJ Library 1.4.3: https://www.dropbox.com/s/sclmax88prirgk0/android-async-http-1.4.3.jar

.. _setDeviceInfo(w_dev, h_dev): /_static/javadocs/com/infantium/android/sdk/Infantium_SDK.html#setDeviceInfo(int,%20int)
.. _onFailureCloseGameplay(String description): http://android.sdk.infantium.com/com/infantium/android/sdk/InfantiumAsyncResponseHandler.html#onFailureCloseGameplay(java.lang.String)
.. _onSuccessCloseGameplay(): http://android.sdk.infantium.com/com/infantium/android/sdk/InfantiumAsyncResponseHandler.html#onSuccessCloseGameplay()
.. _getInfantium_SDK(Context context): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#getInfantium_SDK(android.content.Context)
.. _setDeveloperCredentials(String api_user, String api_key): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#setDeveloperCredentials(java.lang.String,%20java.lang.String)
.. _setDeveloperHandler(InfantiumAsyncResponseHandler handler): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#setDeveloperHandler(com.infantium.android.sdk.InfantiumAsyncResponseHandler)
.. _setContentAppUUID(String contentapp_uuid): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#setContentAppUUID(java.lang.String)
.. _createGameplay(String subcontent_uuid): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#createGameplay(java.lang.String)
.. _startPlaying(): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#startPlaying()

.. _Elements: http://android.sdk.infantium.com/com/infantium/android/sdk/Element.html
.. _Sounds: http://android.sdk.infantium.com/com/infantium/android/sdk/Sound.html

.. _addElement(Element element): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#addElement(com.infantium.android.sdk.Element)
.. _addElements(List<Element> elements): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#addElements(java.util.List)
.. _tapNoObjects(List<Integer> position): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#tapNoObjects(java.util.List)
.. _tapNoObjects(List<Integer> position, String sound_id): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#tapNoObjects(java.util.List,%20java.lang.String)
.. _tapOnObjects(String element_id): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#tapOnObjects(java.lang.String)
.. _tapOnObjects(String element_id, String sound_id): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#tapOnObjects(java.lang.String,%20java.lang.String)
.. _setSuccesses(int successes): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#setSuccesses(int)
.. _setFailures(int failures): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#setFailures(int)

.. _setTarget(Target target): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#setTarget(com.infantium.android.sdk.Target)
.. _setTargets(List<Target> targets): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#setTargets(java.util.List)
.. _setEvaluate(List<String> eval): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#setEvaluate(java.util.List)
.. _addSound(Sound sound): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#addSound(com.infantium.android.sdk.Sound)
.. _addSounds(List<Sound> sounds): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#addSounds(java.util.List)
.. _addFixedAnimation(Animation animation): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#addFixedAnimation(com.infantium.android.sdk.Animation)
.. _addFixedAnimations(List<Animation> animations): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#addFixedAnimations(java.util.List)
.. _addDynamicField(DynamicField d_field): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#addDynamicField(com.infantium.android.sdk.DynamicField)
.. _addDynamicFields(List<DynamicField> d_fields): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#addDynamicFields(java.util.List)
.. _startAnimation(String element_id, List<Integer> st_pos, String type): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#startAnimation(java.lang.String,%20java.util.List,%20java.lang.String)
.. _endAnimation(String element_id): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#endAnimation(java.lang.String)
.. _endAnimation(String element_id, List<Integer> end_pos): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#endAnimation(java.lang.String,%20java.util.List)
.. _endAnimation(String element_id, String sound_id, List<Integer> end_pos): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#endAnimation(java.lang.String,%20java.lang.String,%20java.util.List)
.. _startDragging(String element_id, List<Integer> position): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#startDragging(java.lang.String,%20java.util.List)
.. _finishDragging(List<Integer> position): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#finishDragging(java.util.List)
.. _finishDragging(List<Integer> position, int max_x, int max_y): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#finishDragging(java.util.List,%20int,%20int)
.. _finishDragging(List<Integer> position, String sound_id): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#finishDragging(java.util.List,%20java.lang.String)
.. _finishDragging(List<Integer> position, String sound_id, int max_x, int max_y): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#finishDragging(java.util.List,%20java.lang.String,%20int,%20int)

.. _sendGameRawData(): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#sendGameRawData()
.. _closeGameplay(): http://android.sdk.infantium.com/com/infantium/android/sdk/Infantium_SDK.html#closeGameplay()
